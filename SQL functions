Sure! Below are the two Python functions you requested, using the `sqlite3` library and the `pandas` library.

### 1. `retrieve_columns`

This function retrieves specified columns from a given table in the SQLite database and returns the result as a pandas DataFrame.

```python
import sqlite3
import pandas as pd

def retrieve_columns(dataBasePath, tableName, columnNames):
    # Create a connection to the database
    conn = sqlite3.connect(dataBasePath)
    
    # Get the list of existing columns in the table
    cursor = conn.execute(f"PRAGMA table_info({tableName})")
    existing_columns = [row[1] for row in cursor.fetchall()]
    
    # Filter the columns to only include those that exist in the table
    valid_columns = [col for col in columnNames if col in existing_columns]
    
    # If no valid columns found, return an empty DataFrame
    if not valid_columns:
        conn.close()
        return pd.DataFrame()
    
    # Construct the SQL query
    columns = ', '.join(valid_columns)
    query = f"SELECT {columns} FROM {tableName}"
    
    # Execute the query and fetch the result into a pandas DataFrame
    df = pd.read_sql_query(query, conn)
    
    # Close the connection
    conn.close()
    
    return df

### 2. `update_columns`

To ensure that the update_columns function can handle both updating existing columns and inserting new columns if they do not exist, we need to do the following:

	1.	Check which columns already exist in the database.
	2.	For existing columns, update their values.
	3.	For non-existing columns, add them to the table and then insert their values.

Here’s the modified update_columns function:

import sqlite3
import pandas as pd

def update_columns(dataBasePath, tableName, inputDataFrame):
    # Create a connection to the database
    conn = sqlite3.connect(dataBasePath)
    cursor = conn.cursor()
    
    # Get the list of existing columns in the table
    cursor.execute(f"PRAGMA table_info({tableName})")
    existing_columns = [row[1] for row in cursor.fetchall()]
    
    # Iterate over the columns in the DataFrame
    for col in inputDataFrame.columns:
        if col in existing_columns:
            # Update existing column
            for idx, value in enumerate(inputDataFrame[col]):
                cursor.execute(f"""
                    UPDATE {tableName}
                    SET {col} = ?
                    WHERE rowid = ?
                """, (value, idx + 1))
        else:
            # Add new column to the table
            cursor.execute(f"ALTER TABLE {tableName} ADD COLUMN {col}")
            
            # Insert values into the new column
            for idx, value in enumerate(inputDataFrame[col]):
                cursor.execute(f"""
                    UPDATE {tableName}
                    SET {col} = ?
                    WHERE rowid = ?
                """, (value, idx + 1))
    
    # Commit the transaction
    conn.commit()
    
    # Close the connection
    conn.close()

Explanation:

	1.	Check Existing Columns:
	•	Use the PRAGMA table_info command to get metadata about the columns in the specified table.
	•	Extract the column names from the metadata.
	2.	Iterate Over DataFrame Columns:
	•	For each column in the inputDataFrame, check if it exists in the table.
	•	If the column exists, update its values.
	•	Iterate over the rows in the DataFrame and update the corresponding rows in the table using the rowid as the key.
	•	If the column does not exist, add it to the table using the ALTER TABLE command and then insert its values.
	3.	Update Rows:
	•	Use the UPDATE statement to set the column values in the table for each row. We assume rowid as a unique identifier to locate the rows.
	4.	Commit and Close:
	•	Commit the transaction to save the changes in the database.
	•	Close the connection to the SQLite database.

Note:

	•	The rowid is used as a unique identifier to locate rows. This assumes that the rows in the DataFrame correspond directly to the rows in the database table. If the table has a different unique identifier, you’ll need to adjust the UPDATE statement accordingly.
	•	The function assumes that the DataFrame has the same number of rows as the table. If this assumption does not hold, additional logic would be needed to correctly match rows between the DataFrame and the table.
