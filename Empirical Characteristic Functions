def plot_market_trajectories_with_labels(trajectories, transition_probs):
    """
    Plots all possible market trajectories with labeled time indices instead of numerical values.
    
    Parameters:
    trajectories - List of market paths from time 0 to 2n.
    transition_probs - Dictionary with transition probabilities.
    """
    plt.figure(figsize=(12, 7))
    
    # Find the asset price at present time to set as vertical origin
    present_price = trajectories[0][len(trajectories[0]) // 2][1]
    
    # Generate custom time labels
    num_steps = len(trajectories[0])
    time_labels = [f"t_{i}" for i in range(num_steps)]
    time_indices = list(range(num_steps))

    # Draw each trajectory
    for traj in trajectories:
        times, prices = zip(*traj)
        plt.plot(times, np.array(prices) - present_price, marker='o', linestyle='-', color='gray', alpha=0.6)

        # Annotate nodes with price values
        for t, p in traj:
            plt.text(t, p - present_price, f"{p:.2f}", fontsize=9, ha='center', va='center', 
                     bbox=dict(facecolor='white', edgecolor='black', boxstyle='round,pad=0.3'))

    # Annotate transition probabilities (only for future regime)
    for (start, end), prob in transition_probs.items():
        t_start, p_start = start
        t_end, p_end = end
        plt.text((t_start + t_end) / 2, (p_start + p_end) / 2 - present_price, f"{prob:.2f}", 
                 fontsize=8, ha='center', color='blue')

    plt.axvline(x=len(trajectories[0]) // 2, color='black', linestyle='--', label="Present Time")  # Indicate present time
    plt.axhline(y=0, color='black', linestyle='-', linewidth=1)  # Set horizontal origin

    plt.xticks(time_indices, time_labels)  # Replace numerical time steps with labeled indices
    plt.xlabel("Time Steps")
    plt.ylabel("Price Deviation from Present")
    plt.title("Possible Market Trajectories with Transition Probabilities")
    plt.legend()
    plt.show()

def generate_market_trajectories(past_prices):
    """
    Generates all possible market trajectories based on past prices.
    
    Parameters:
    past_prices - A list of past stock prices (length n+1).
    
    Returns:
    A list of trajectories, each represented as a sequence of prices.
    A dictionary of transition probabilities for future moves.
    """
    n = len(past_prices) - 1  # Number of past returns
    PR = np.array(past_prices[1:]) / np.array(past_prices[:-1])  # Compute past returns

    # The time-mesh: [0, ..., 2n]
    time_steps = list(range(2 * n + 1))

    # Start with a single trajectory in the past
    past_trajectory = [(t, past_prices[t]) for t in range(n + 1)]
    trajectories = [past_trajectory]  # Initialize with past regime trajectory

    transition_probs = {}  # Dictionary to store probabilities of future transitions

    # Generate all possible future paths
    for t in range(n, 2 * n):
        new_trajectories = []
        for traj in trajectories:
            last_price = traj[-1][1]
            new_nodes = [(t + 1, last_price * r) for r in PR]

            for node in new_nodes:
                new_traj = traj + [node]
                new_trajectories.append(new_traj)

                # Store transition probability
                transition_probs[(traj[-1], node)] = 1 / len(PR)

        trajectories = new_trajectories  # Update with new paths

    return trajectories, transition_probs


# Example past price data for n=3
past_prices_trajectories = [100, 110, 105]  # Example past prices

# Generate and plot market trajectories
market_trajectories, transition_probs = generate_market_trajectories(past_prices_trajectories)
plot_market_trajectories(market_trajectories, transition_probs)


# Generate and plot market trajectories with labeled time steps
plot_market_trajectories_with_labels(market_trajectories, transition_probs)