import numpy as np
import matplotlib.pyplot as plt

def getValuesAnalytics(Values, QuantileLevels, QuantileValues):
    """
    Displays a histogram of 'Values' with dynamically chosen bins, 
    annotated quantiles, and enhanced readability.

    Args:
        Values (list or array): Empirical observations of a random variable.
        QuantileLevels (list or array): Quantile levels (e.g., [0.3, 0.5, 0.9]).
        QuantileValues (list or array): Quantile values corresponding to the levels.
    """
    # Convert input data to numpy arrays for computation
    Values = np.array(Values)
    QuantileLevels = np.array(QuantileLevels)
    QuantileValues = np.array(QuantileValues)
    
    # Dynamic bin width using Freedman-Diaconis rule
    q25, q75 = np.percentile(Values, [25, 75])
    iqr = q75 - q25  # Interquartile range
    bin_width = 2 * iqr / np.cbrt(len(Values))  # Freedman-Diaconis rule
    bins = int((Values.max() - Values.min()) / bin_width)
    
    # Plot histogram
    plt.figure(figsize=(12, 6))
    plt.hist(Values, bins=bins, density=True, alpha=0.7, color="blue", edgecolor="black", label="Empirical Density")
    
    # Add vertical lines for quantiles and annotate
    height_increment = 0.05 * plt.ylim()[1]  # Incremental height for annotations
    current_height = plt.ylim()[1] * 0.9  # Start at 90% of y-axis limit
    
    for i, (level, value) in enumerate(zip(QuantileLevels, QuantileValues)):
        # Plot vertical line
        plt.axvline(value, color="red", linestyle="--", linewidth=2)
        # Annotate quantile level with increasing height
        plt.text(value, current_height, f"{level:.1%}", color="red", fontsize=10, ha="center", va="bottom")
        current_height -= height_increment  # Increase height to avoid overlap
    
    # Add quantile values to x-axis
    xticks = np.sort(np.unique(np.concatenate([plt.xticks()[0], QuantileValues])))
    plt.xticks(xticks, rotation=45)
    
    # Add labels, legend, and grid
    plt.title("Empirical Histogram with Dynamic Bin Width and Quantile Annotations", fontsize=16)
    plt.xlabel("Value", fontsize=14)
    plt.ylabel("Density", fontsize=14)
    plt.legend(fontsize=12)
    plt.grid(alpha=0.3)
    
    # Show plot
    plt.tight_layout()
    plt.show()