import numpy as np
import matplotlib.pyplot as plt

def getValuesAnalytics(Values, QuantileLevels, QuantileValues):
    """
    Displays a histogram using the Freedman-Diaconis rule and an empirical CDF plot with quantile annotations.

    Args:
        Values (list or array): Empirical observations of a random variable.
        QuantileLevels (list or array): Quantile levels (e.g., [0.3, 0.5, 0.9]).
        QuantileValues (list or array): Quantile values corresponding to the levels.
    """
    # Convert input data to numpy array
    Values = np.array(Values)
    QuantileLevels = np.array(QuantileLevels)
    QuantileValues = np.array(QuantileValues)

    # Calculate Freedman-Diaconis bin width
    q25, q75 = np.percentile(Values, [25, 75])  # Compute Q1 (25th percentile) and Q3 (75th percentile)
    iqr = q75 - q25  # Interquartile range
    bin_width = 2 * iqr / np.cbrt(len(Values))  # Freedman-Diaconis rule
    bin_width = max(bin_width, 1e-6)  # Avoid too-small bin widths
    bins = np.arange(Values.min(), Values.max() + bin_width, bin_width)

    # Compute histogram
    hist, bin_edges = np.histogram(Values, bins=bins, density=True)  # Density=True for PDF-like scaling
    bin_centers = (bin_edges[:-1] + bin_edges[1:]) / 2

    # Calculate the empirical CDF
    sorted_values = np.sort(Values)
    cdf = np.arange(1, len(sorted_values) + 1) / len(sorted_values)

    # Create the figure with two subplots
    fig, axs = plt.subplots(2, 1, figsize=(12, 10), sharex=True)

    # Histogram plot (PDF approximation)
    axs[0].bar(bin_centers, hist, width=bin_width, alpha=0.7, color="blue", edgecolor="black", align="center")
    axs[0].set_title("Histogram (Freedman-Diaconis Rule)", fontsize=16)
    axs[0].set_ylabel("Density", fontsize=14)
    axs[0].grid(alpha=0.3)

    # Add vertical lines for quantiles on the histogram
    for level, value in zip(QuantileLevels, QuantileValues):
        axs[0].axvline(value, color="red", linestyle="--", linewidth=2)
        axs[0].text(value, max(hist) * 0.9, f"{level:.1%}", color="red", fontsize=10, ha="center", va="bottom")

    # Empirical CDF plot
    axs[1].plot(sorted_values, cdf, color="blue", linewidth=2, label="Empirical CDF")
    axs[1].scatter(sorted_values, np.zeros_like(sorted_values), color="red", marker="x", label="Occurrences at X-axis")
    
    # Add vertical lines for quantiles on the CDF
    for level, value in zip(QuantileLevels, QuantileValues):
        axs[1].axvline(value, color="red", linestyle="--", linewidth=2)
        axs[1].text(value, level, f"{level:.1%}", color="red", fontsize=10, ha="center", va="bottom")

    # Set titles and labels for the CDF
    axs[1].set_title("Empirical Cumulative Distribution Function (CDF)", fontsize=16)
    axs[1].set_xlabel("Value", fontsize=14)
    axs[1].set_ylabel("CDF", fontsize=14)
    axs[1].legend(fontsize=12)
    axs[1].grid(alpha=0.3)

    # Adjust layout
    plt.tight_layout()
    plt.show()