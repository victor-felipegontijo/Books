import numpy as np
import matplotlib.pyplot as plt
from scipy.stats import uniform, norm, expon

# Function to simulate observations from different distributions
def simulate_observations(distribution, N):
    if distribution == "uniform":
        return uniform.rvs(loc=-1, scale=2, size=N)  # Compact support [-1, 1]
    elif distribution == "normal":
        return norm.rvs(loc=0, scale=1, size=N)  # Light tails
    elif distribution == "exponential":
        return expon.rvs(scale=1, size=N)  # Heavy tail (positive support)
    else:
        raise ValueError("Unknown distribution")

# Empirical characteristic function
def empirical_cf(observations, z):
    return np.mean(np.exp(1j * z * observations))

# Evaluate empirical characteristic function on a 2D grid
def compute_cf_grid(observations, x_range, y_range, num_points):
    x = np.linspace(x_range[0], x_range[1], num_points)
    y = np.linspace(y_range[0], y_range[1], num_points)
    X, Y = np.meshgrid(x, y)
    Z = X + 1j * Y
    cf_values = np.vectorize(lambda z: empirical_cf(observations, z))(Z)
    return X, Y, cf_values

# Check Cauchy-Riemann conditions
def check_cauchy_riemann(X, Y, cf_values, dx, dy):
    real_cf = np.real(cf_values)
    imag_cf = np.imag(cf_values)
    
    # Numerical partial derivatives
    d_real_dx = np.gradient(real_cf, dx, axis=1)
    d_real_dy = np.gradient(real_cf, dy, axis=0)
    d_imag_dx = np.gradient(imag_cf, dx, axis=1)
    d_imag_dy = np.gradient(imag_cf, dy, axis=0)
    
    # Cauchy-Riemann conditions
    cr1 = d_real_dx - d_imag_dy  # Should be approximately 0
    cr2 = d_real_dy + d_imag_dx  # Should be approximately 0
    
    return cr1, cr2

# Visualization of the results
def plot_results(X, Y, cf_values, cr1, cr2):
    plt.figure(figsize=(16, 8))
    
    # Plot the magnitude of the characteristic function
    plt.subplot(1, 3, 1)
    plt.contourf(X, Y, np.abs(cf_values), levels=50, cmap="viridis")
    plt.colorbar()
    plt.title("Magnitude of CF")
    plt.xlabel("Re(z)")
    plt.ylabel("Im(z)")
    
    # Plot the first Cauchy-Riemann condition (should be ~0)
    plt.subplot(1, 3, 2)
    plt.contourf(X, Y, np.abs(cr1), levels=50, cmap="plasma")
    plt.colorbar()
    plt.title("|CR1|: $\\partial_x$Re(CF) - $\\partial_y$Im(CF)")
    plt.xlabel("Re(z)")
    plt.ylabel("Im(z)")
    
    # Plot the second Cauchy-Riemann condition (should be ~0)
    plt.subplot(1, 3, 3)
    plt.contourf(X, Y, np.abs(cr2), levels=50, cmap="plasma")
    plt.colorbar()
    plt.title("|CR2|: $\\partial_y$Re(CF) + $\\partial_x$Im(CF)")
    plt.xlabel("Re(z)")
    plt.ylabel("Im(z)")
    
    plt.tight_layout()
    plt.show()

# Main function to run the simulation and analysis
def main():
    # Parameters
    N = 1000  # Number of observations
    distribution = "uniform"  # Options: "uniform", "normal", "exponential"
    x_range = [-5, 5]  # Real part of z
    y_range = [-5, 5]  # Imaginary part of z
    num_points = 100  # Number of grid points along each axis
    dx = (x_range[1] - x_range[0]) / num_points  # Grid spacing in x
    dy = (y_range[1] - y_range[0]) / num_points  # Grid spacing in y
    
    # Simulate observations
    observations = simulate_observations(distribution, N)
    
    # Compute empirical characteristic function on the grid
    X, Y, cf_values = compute_cf_grid(observations, x_range, y_range, num_points)
    
    # Check Cauchy-Riemann conditions
    cr1, cr2 = check_cauchy_riemann(X, Y, cf_values, dx, dy)
    
    # Plot results
    plot_results(X, Y, cf_values, cr1, cr2)

# Run the main function
if __name__ == "__main__":
    main()
