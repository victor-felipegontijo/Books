import numpy as np
import matplotlib.pyplot as plt
from scipy.stats import gaussian_kde

def getValuesAnalytics(Values, QuantileLevels, QuantileValues):
    """
    Displays a histogram with dynamic bin widths and annotated quantiles.

    Args:
        Values (list or array): Empirical observations of a random variable.
        QuantileLevels (list or array): Quantile levels (e.g., [0.3, 0.5, 0.9]).
        QuantileValues (list or array): Quantile values corresponding to the levels.
    """
    # Convert input data to numpy array
    Values = np.array(Values)
    QuantileLevels = np.array(QuantileLevels)
    QuantileValues = np.array(QuantileValues)
    
    # Compute kernel density estimation for adaptive binning
    kde = gaussian_kde(Values)
    density = kde(Values)
    
    # Define bins dynamically based on quantiles and data density
    sorted_values = np.sort(Values)
    bin_edges = np.concatenate(([Values.min()], 
                                sorted_values[::len(sorted_values)//30], 
                                [Values.max()]))
    
    # Create histogram and normalize to show proportions
    hist, bin_edges = np.histogram(Values, bins=bin_edges)
    proportions = hist / len(Values)  # Normalize by total occurrences
    bin_centers = (bin_edges[:-1] + bin_edges[1:]) / 2

    # Plot the histogram
    plt.figure(figsize=(12, 6))
    plt.bar(bin_centers, proportions, width=np.diff(bin_edges), alpha=0.7,
            color="blue", edgecolor="black", align="center", label="Proportions")
    
    # Add quantile annotations
    height_increment = 0.05  # Increment for vertical placement
    current_height = max(proportions) * 0.9  # Start at 90% of max height
    
    for i, (level, value) in enumerate(zip(QuantileLevels, QuantileValues)):
        # Plot vertical lines
        plt.axvline(value, color="red", linestyle="--", linewidth=2)
        # Annotate quantile level with increasing heights
        plt.text(value, current_height, f"{level:.1%}", color="red", fontsize=10, ha="center", va="bottom")
        current_height -= height_increment  # Avoid overlap
    
    # Add quantile values to x-axis
    xticks = np.sort(np.unique(np.concatenate([plt.xticks()[0], QuantileValues])))
    plt.xticks(xticks, rotation=45)
    
    # Add labels, legend, and grid
    plt.title("Histogram with Dynamic Bins and Quantile Annotations", fontsize=16)
    plt.xlabel("Value", fontsize=14)
    plt.ylabel("Proportion", fontsize=14)
    plt.legend(fontsize=12)
    plt.grid(alpha=0.3)
    
    # Show plot
    plt.tight_layout()
    plt.show()