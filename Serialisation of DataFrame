import os

# LaTeX content for the pricing framework introduction
tex_content = r"""
\documentclass[11pt]{article}
\usepackage[utf8]{inputenc}
\usepackage[T1]{fontenc}
\usepackage{amsmath,amssymb}
\usepackage{hyperref}
\title{Introduction to the Monte Carlo Pricing Framework}
\author{Co-Development Team}
\date{\today}

\begin{document}
\maketitle

\section{Overview}
This document provides a high-level introduction to the Monte Carlo (MC) pricing framework used within the Elib and Keops libraries. It outlines the workflow from pricing request initialization to result computation.

\section{General Workflow}
Pricing requests are handled through \texttt{Container (KeopsDomain)} objects, which encapsulate all necessary entities for a pricing request:
\begin{itemize}
  \item Product definition
  \item Underlying assets
  \item Fixing dates
  \item Pricing model
  \item Pricing algorithm
  \item Supplementary indicators
\end{itemize}
Once the \texttt{Container} is loaded, pricing is initiated via the \texttt{PricingCommandRawData} entity, specialized into a concrete pricer derived from \texttt{PricingEngineBase}.

\section{Monte Carlo Engine and \texttt{ComputeResults}}
The \texttt{TextualOptionMonteCarloPricer}, derived from \texttt{PricingEngineBase}, implements the \texttt{ComputeResults} method. Within this method, three main \texttt{ElibObject} instances are created:
\begin{enumerate}
  \item \texttt{product} via \texttt{CreateProduct(...)}
  \item \texttt{transition} via \texttt{CreateTransition(...)}
  \item \texttt{pricer} via \texttt{CreatePricer(..., product, transition, ...)}
\end{enumerate}
Pricing results are obtained by calling:
\begin{verbatim}
res = Price(..., pricer, ...)
\end{verbatim}

\section{Elib Object Lifecycle}
\subsection{Transition Creation}
The \texttt{MC-Optimized-Transition} object is created by the factory implementation \texttt{TransitionFactoryImpl}, which allocates and initializes memory based on parameters from \texttt{tabValues}.

\subsection{Pricer Creation}
Similarly, the \texttt{MC-Generic-Pricer} object is instantiated by \texttt{PricerFactoryImpl}, returning a shared pointer to \texttt{MC-Generic-Pricer}.

\subsection{Pricing Execution}
The call to \texttt{ElibM(Pricer::Price)} recovers the pricer pointer and loads pricing parameters (\texttt{NBSimulations}, \texttt{WienerPathGenerationMethod}, \texttt{MonteCarloScheme}, etc.) before executing \texttt{pricer->price()}.

\section{Scenario Computation with \texttt{MetaPricer}}
The \texttt{pricer} is passed to \texttt{MetaPricer::computeScenarii}, which:
\begin{enumerate}
  \item Executes a central scenario for price and ``smart Greeks''
  \item Executes perturbed scenarios for bumped Greeks
\end{enumerate}
Results are returned as a vector of \texttt{PricingResultsWithGreeks}.

\section{Core Monte Carlo Solver}
\subsection{Initialization}
The \texttt{MC-Solver} is initialized with:
\begin{itemize}
  \item \texttt{MC-Trajectory} loaded with past spot values (\texttt{initializePastFixings})
  \item \texttt{m-volGenerator} in \texttt{MC-Transition} loaded with \texttt{IBrownianPathGenerator} instances
\end{itemize}

\subsection{Execution Flow}
\begin{enumerate}
  \item \texttt{SetDesiredNumberOfTasks}: partition tasks among threads
  \item \texttt{setGenerator}: create \texttt{PerThreadData} per thread
  \item \texttt{Price-portfolio}: launch \texttt{Loop} in parallel and aggregate \texttt{m-PortfolioResults}
  \item \texttt{Loop}: for each sub-block of trajectories:
    \begin{itemize}
      \item \texttt{GenerateAleasAndMeasureWeight}: load uniform random variables via \texttt{MC-AleasGenerator}
      \item \texttt{SimulateOnce}: construct trajectories and compute payoffs via \texttt{ComputeEulerTrajectories} or \texttt{computeAmericanPrice}
    \end{itemize}
\end{enumerate}

\section{Path-Dependent and American Features}
Payoff-modification events include early-exercise, callable, barriers, conditional coupons, autocall barriers, etc. Conditional revaluations use the Longstaff-Schwartz algorithm, implemented via \texttt{ContinuationValue} features and regressions in \texttt{MC-Solver::precomputeContinuationValues}.

\section{Data Structures}
\texttt{AmericanFeature} instances store observation dates, quantitative data (\texttt{inValuesOnTrajectory}), and reference/involved contracts. \texttt{DRVContinuationValue} wraps regression logic for conditional payoffs.

\section{Call Stack Overview}
\begin{verbatim}
TextualOptionMonteCarloPricer::ComputeResults
  -> ElibM(Pricer::Price)
    -> MetaPricer::computeScenarii
      -> MC-Generic-Pricer::price
        -> MC-Solver::Price-portfolio
          -> MC-Solver::Loop
            -> MC-Solver::SimulateOnce
\end{verbatim}

\end{document}
"""

# Write the LaTeX file to the notebook environment
file_path = '/mnt/data/pricing_framework_intro.tex'
with open(file_path, 'w') as f:
    f.write(tex_content)

file_path