using System;
using System.Linq;
using Newtonsoft.Json;
using Newtonsoft.Json.Linq;
using Microsoft.Data.Analysis;

public class DataFrameJsonConverter : JsonConverter<DataFrame>
{
    public override DataFrame ReadJson(JsonReader reader, Type objectType, DataFrame existingValue, bool hasExistingValue, JsonSerializer serializer)
    {
        // Load the entire JSON object
        var root = JObject.Load(reader);
        var df = new DataFrame();

        // Drill into your "Data" â†’ "Columns" array
        var columns = root["Data"]?["Columns"] as JArray;
        if (columns == null)
            throw new JsonSerializationException("Expected Data.Columns array");

        foreach (var colToken in columns)
        {
            var name = colToken.Value<string>("Name");
            var typeName = colToken.Value<string>("DataType");
            var values = colToken["Values"] as JArray;

            if (name == null || typeName == null || values == null)
                throw new JsonSerializationException("Column missing Name, DataType, or Values");

            DataFrameColumn column;

            switch (typeName)
            {
                case "Int32":
                    {
                        var intCol = new Int32DataFrameColumn(name, values.Count);
                        for (long i = 0; i < values.Count; i++)
                        {
                            var tok = values[(int)i];
                            intCol[i] = tok.Type == JTokenType.Null
                                ? (int?)null
                                : tok.Value<int>();
                        }
                        column = intCol;
                        break;
                    }
                case "Double":
                    {
                        var dblCol = new DoubleDataFrameColumn(name, values.Count);
                        for (long i = 0; i < values.Count; i++)
                        {
                            var tok = values[(int)i];
                            dblCol[i] = tok.Type == JTokenType.Null
                                ? (double?)null
                                : tok.Value<double>();
                        }
                        column = dblCol;
                        break;
                    }
                case "DateTime":
                    {
                        // PrimitiveDataFrameColumn<T> works for DateTime
                        var dtCol = new PrimitiveDataFrameColumn<DateTime?>(name, values.Count);
                        for (long i = 0; i < values.Count; i++)
                        {
                            var tok = values[(int)i];
                            dtCol[i] = tok.Type == JTokenType.Null
                                ? (DateTime?)null
                                : tok.Value<DateTime>();
                        }
                        column = dtCol;
                        break;
                    }
                default:
                    {
                        // Fallback to string
                        var strCol = new StringDataFrameColumn(name, values.Count);
                        for (long i = 0; i < values.Count; i++)
                        {
                            var tok = values[(int)i];
                            strCol[i] = tok.Type == JTokenType.Null
                                ? null
                                : tok.ToString();
                        }
                        column = strCol;
                        break;
                    }
            }

            df.Columns.Add(column);
        }

        return df;
    }

    public override void WriteJson(JsonWriter writer, DataFrame value, JsonSerializer serializer)
    {
        throw new NotImplementedException("Serialization not implemented");
    }
}